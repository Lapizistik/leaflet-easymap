!function(e){var t={};function o(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(i,r,function(t){return e[t]}.bind(null,r));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=3)}([function(e,t,o){"use strict";var i='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors';L.easymap={attribution:'<a href="http://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> | <a href="https://lapizistik.github.io/leaflet-easymap" title="Include maps in HTML without programming">Easymap</a>',config:{provider:{osm_org:{url:"http://{s}.tile.osm.org/{z}/{x}/{y}.png",options:{attribution:i}},opencycle:{url:"http://{s}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png",options:{attribution:"&copy; OpenCycleMap, Map data "+i}}},default_provider:"osm_org",origin:[51.48,0],zoom:14,iconsizes:{small:18,medium:26,large:34},class:"leasymap"},makiurl:"maki/icons/{maki}-15.svg"}},function(e,t){if(!("L"in window))throw new ReferenceError("You must load Leaflet to use Leasymap!")},,function(e,t,o){"use strict";o.r(t);o(1),o(0);var i='<svg style="width:{iconwidth};" viewBox="-10.5 -30.5 21 31.4" xmlns="http://www.w3.org/2000/svg"><path d="m 0,0 c 0,0 -10,-15 -10,-20 0,-5 5,-10 10,-10 5,0 10,5 10,10 C 10,-15 0,0 0,0 Z" style="fill:{marker-color};stroke:{stroke};stroke-width:{stroke-width};" />{inner}</svg>',r='<text x="0" y="-15" text-anchor="middle" style="stroke:none;fill:{marker-symbolcolor}">{text}</text>',n='<svg x="-7" y="-25" width="14" height="14" style="fill:{marker-symbolcolor};"></svg>',a='<circle r="4.2" cy="-20" cx="0" style="fill:{marker-symbolcolor};stroke:{stroke};stroke-width:{stroke-width};" />',s=L.DivIcon.extend({options:{className:"svg-icon",iconSize:L.easymap.config.iconsizes.medium,"marker-color":"#7e7e7e","marker-symbolcolor":"#ffffff",stroke:"#555555","stroke-width":.3,"stroke-opacity":1},initialize:function(e){if((e=L.Util.setOptions(this,e)).iconSize=L.easymap.config.iconsizes[e["marker-size"]]||e.iconSize,!isNaN(e.iconSize)){var t=e.iconSize;e.iconSize=[t,1.48*t]}if(e.iconAnchor=[e.iconSize[0]/2,e.iconSize[1]],e.popupAnchor=[0,-.8*e.iconSize[1]],e.tooltipAnchor=[0,-.6*e.iconSize[1]],e.shadowSize=e.shadowSize||.8*e.iconSize[1],!isNaN(e.shadowSize)){var o=e.shadowSize;e.shadowSize=[o,.5*o]}e.shadowAnchor=[.1*e.shadowSize[0],1.2*e.shadowSize[1]]},createIcon:function(e){var t=this.options;function o(e,t,o){var i=new XMLHttpRequest;i.onreadystatechange=function(){if(i.readyState===XMLHttpRequest.DONE&&200===i.status){for(var t=i.responseXML.getElementsByTagName("svg")[0],o=e.firstElementChild.getElementsByTagName("svg")[0],r=o.attributes,n=0;n<r.length;n++)t.setAttributeNode(r[n].cloneNode());o.parentNode.replaceChild(t,o)}},i.open("GET",L.Util.template(function(e){return L.Util.template(L.easymap.makiurl,{maki:e})}(t))),i.send()}var s=function(e,t){var s,l=L.extend({iconwidth:t.iconSize[0]},t);l.inner=(s=t["marker-symbol"]||t.symbol,/^[a-zA-Z0-9]$/.test(s)?(l.text=s,L.Util.template(r,l)):s?(o(e,s),L.Util.template(n,l)):L.Util.template(a,l));var c=L.Util.template(i,l);return e.innerHTML=c,e}(document.createElement("div"),t);return this._setIconStyles(s,"icon"),s},createShadow:function(e){var t=document.createElement("div"),o=L.Util.template('<svg style="width:{iconwidth};" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28"><defs><filter id="f" height="1.7" y="-0.2" width="1.4" x="-0.2"><feGaussianBlur stdDeviation="1.5491099" /></filter></defs><path d="m 2,18 c 1.4,-2 1,-3.5 3,-6.5 1.5,-3 6.8,-7 10,-8 3,-1 5,-0.8 7,0 1.6,0.9 3.5,1.8 3,3 -0.4,1 0,3 -2,5 -2,1.8 -5.7,3 -9,4 -3.4,1 -8.8,2 -11,3 z" style="opacity:0.1;fill:#000;stroke:none;filter:url(#f);" /></svg>',{iconwidth:10*this.options.iconSize[0]});return t.innerHTML=o,this._setIconStyles(t,"shadow"),t}});function l(e,t,o,i){var r=new XMLHttpRequest;r.overrideMimeType("application/json"),r.onreadystatechange=function(){if(r.readyState===XMLHttpRequest.DONE&&200===r.status){var t=(a=r.responseText,JSON.parse(a,function(e,t){return c.test(e)&&p.test(t)?"#"+t:t})),n=L.geoJSON(t,L.easymap.geojson).addTo(e);o&&e.fitBounds(n.getBounds()),i&&n.bindTooltip(i)}var a},r.open("GET",t),r.send()}L.easymap.geojson={style:function(e){return e.properties&&e.properties.pathoptions||{}},pointToLayer:function(e,t){return L.marker(t,{icon:(o=e.properties,new s(o))});var o},onEachFeature:function(e,t){!function(e,t){var o=function(e){var t=e.properties.popupTemplate||e.popupTemplate;if(t)return t;var o="",i=e.properties.title,r=e.properties.description;i&&(o=o+"<h2>"+i+"</h2>");r&&(o=o+"<p>"+r+"</p>");if(o)return'<div class="feature">'+o+"</div>";return null}(e);if(!o)return;var i={autoClose:e.properties.autoclose};t.bindPopup(o,i);e.properties.openpopup&&t.openPopup()}(e,t);var o=e.properties.tooltip||e.properties.title;o&&t.bindTooltip(o);var i=e.properties.style||e.properties.css||e.style;t.setStyle&&t.setStyle(i)}};var c=/^(?:(?:marker-(?:symbol)?)?colou?r|stroke|fill)$/,p=/^(?:[0-9a-fA-F]{3,4}){1,2}$/;function u(e,t){return e.getAttribute("data-"+t)}function d(e,t){var o=e.attributes,i=t&&L.extend({},t)||{},r=u(e,"attribution");r&&(i.attribution=r);for(var n=0;n<o.length;n++){var a=o[n].name.match(/^data-provider-(.*)$/);a&&a[1]&&(i[a[1]]=o[n].value)}return i}var f='<svg style="width:{iconwidth};" viewBox="-10.5 -30.5 21 31.4" xmlns="http://www.w3.org/2000/svg"><path d="m 0,0 c 0,0 -10,-15 -10,-20 0,-5 5,-10 10,-10 5,0 10,5 10,10 C 10,-15 0,0 0,0 Z" style="fill:{marker-color};stroke:{stroke};stroke-width:{stroke-width};" />{inner}</svg>',m='<text x="0" y="-15" text-anchor="middle" style="stroke:none;fill:{marker-symbolcolor}">{text}</text>',h='<svg x="-7" y="-25" width="14" height="14" style="fill:{marker-symbolcolor};"></svg>',y='<circle r="4.2" cy="-20" cx="0" style="fill:{marker-symbolcolor};stroke:{stroke};stroke-width:{stroke-width};" />';L.DivIcon.extend({options:{className:"svg-icon",iconSize:L.easymap.config.iconsizes.medium,"marker-color":"#7e7e7e","marker-symbolcolor":"#ffffff",stroke:"#555555","stroke-width":.3,"stroke-opacity":1},initialize:function(e){if((e=L.Util.setOptions(this,e)).iconSize=L.easymap.config.iconsizes[e["marker-size"]]||e.iconSize,!isNaN(e.iconSize)){var t=e.iconSize;e.iconSize=[t,1.48*t]}if(e.iconAnchor=[e.iconSize[0]/2,e.iconSize[1]],e.popupAnchor=[0,-.8*e.iconSize[1]],e.tooltipAnchor=[0,-.6*e.iconSize[1]],e.shadowSize=e.shadowSize||.8*e.iconSize[1],!isNaN(e.shadowSize)){var o=e.shadowSize;e.shadowSize=[o,.5*o]}e.shadowAnchor=[.1*e.shadowSize[0],1.2*e.shadowSize[1]]},createIcon:function(e){var t=this.options;function o(e,t,o){var i=new XMLHttpRequest;i.onreadystatechange=function(){if(i.readyState===XMLHttpRequest.DONE&&200===i.status){for(var t=i.responseXML.getElementsByTagName("svg")[0],o=e.firstElementChild.getElementsByTagName("svg")[0],r=o.attributes,n=0;n<r.length;n++)t.setAttributeNode(r[n].cloneNode());o.parentNode.replaceChild(t,o)}},i.open("GET",L.Util.template(function(e){return L.Util.template(L.easymap.makiurl,{maki:e})}(t))),i.send()}var i=function(e,t){var i,r=L.extend({iconwidth:t.iconSize[0]},t);r.inner=(i=t["marker-symbol"]||t.symbol,/^[a-zA-Z0-9]$/.test(i)?(r.text=i,L.Util.template(m,r)):i?(o(e,i),L.Util.template(h,r)):L.Util.template(y,r));var n=L.Util.template(f,r);return e.innerHTML=n,e}(document.createElement("div"),t);return this._setIconStyles(i,"icon"),i},createShadow:function(e){var t=document.createElement("div"),o=L.Util.template('<svg style="width:{iconwidth};" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28"><defs><filter id="f" height="1.7" y="-0.2" width="1.4" x="-0.2"><feGaussianBlur stdDeviation="1.5491099" /></filter></defs><path d="m 2,18 c 1.4,-2 1,-3.5 3,-6.5 1.5,-3 6.8,-7 10,-8 3,-1 5,-0.8 7,0 1.6,0.9 3.5,1.8 3,3 -0.4,1 0,3 -2,5 -2,1.8 -5.7,3 -9,4 -3.4,1 -8.8,2 -11,3 z" style="opacity:0.1;fill:#000;stroke:none;filter:url(#f);" /></svg>',{iconwidth:10*this.options.iconSize[0]});return t.innerHTML=o,this._setIconStyles(t,"shadow"),t}});function v(e){var t=u(e,"marker"),o=u(e,"tooltip"),i=u(e,"popup"),r=t&&t.split(","),n=function(e,t){return"TRUE"==(u(e,t)||"").toUpperCase()}(e,"locate"),a=function(e,t){var o=u(e,"origin"),i=o&&o.split(",")||t&&t.slice(0)||L.easymap.config.origin.slice(0),r=u(e,"lat"),n=u(e,"lon");return r&&(i[0]=r),n&&(i[1]=n),i}(e,r),s=u(e,"zoom")||L.easymap.config.zoom,c=u(e,"geojson"),p=L.map(e,{worldCopyJump:!0});"geojson"!=a&&p.setView(a,s),function(e){e.attributionControl&&e.attributionControl.setPrefix(L.easymap.attribution)}(p),n&&p.locate({setView:!0});var f=function(e,t){if("none"===e)return!1;if(L.tileLayer.provider&&L.tileLayer.provider.known(e))return L.tileLayer.provider(e,d(t));var o=L.easymap.config.provider[e];if(!o)throw"No such provider ("+e+")";return L.tileLayer(o.url,d(t,o.options))}(u(e,"provider")||L.easymap.config.default_provider,e);f&&f.addTo(p);var m=r&&L.marker(r).addTo(p),h=i&&L.popup({closeOnClick:!1}).setContent(i);h&&(m?m.bindPopup(h).openPopup():h.setLatLng(a).openOn(p)),c&&l(p,c,"geojson"==a,!m&&o),o&&(m?m.bindTooltip(o).openTooltip():c||f.bindTooltip(o).openTooltip(a))}var g=!1;function w(){g||(L.tileLayer.provider&&!L.tileLayer.provider.known&&(L.tileLayer.provider.known=function(e){return!!L.TileLayer.Provider.providers[e.split(".")[0]]}),function(e){for(var t=document.getElementsByClassName(e||L.easymap.config.class),o=0;o<t.length;o++)v(t[o])}(),g=!0)}document.addEventListener("DOMContentLoaded",w),"loading"!==document.readyState&&w(),console.log(L)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,